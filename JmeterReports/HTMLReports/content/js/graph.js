/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 25836.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 3.0], [0.3, 3.0], [0.4, 3.0], [0.5, 3.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 4.0], [1.4, 4.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 6.0], [2.8, 6.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 8.0], [5.3, 8.0], [5.4, 8.0], [5.5, 8.0], [5.6, 8.0], [5.7, 8.0], [5.8, 8.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 9.0], [6.4, 9.0], [6.5, 9.0], [6.6, 9.0], [6.7, 9.0], [6.8, 9.0], [6.9, 9.0], [7.0, 9.0], [7.1, 9.0], [7.2, 9.0], [7.3, 9.0], [7.4, 10.0], [7.5, 10.0], [7.6, 10.0], [7.7, 10.0], [7.8, 10.0], [7.9, 10.0], [8.0, 10.0], [8.1, 10.0], [8.2, 10.0], [8.3, 10.0], [8.4, 10.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 11.0], [9.3, 11.0], [9.4, 11.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 12.0], [10.1, 12.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 12.0], [10.7, 13.0], [10.8, 13.0], [10.9, 13.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 13.0], [11.7, 13.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 14.0], [12.4, 14.0], [12.5, 14.0], [12.6, 14.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 15.0], [13.1, 15.0], [13.2, 15.0], [13.3, 15.0], [13.4, 15.0], [13.5, 15.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 15.0], [14.1, 16.0], [14.2, 16.0], [14.3, 16.0], [14.4, 16.0], [14.5, 16.0], [14.6, 16.0], [14.7, 16.0], [14.8, 16.0], [14.9, 16.0], [15.0, 16.0], [15.1, 16.0], [15.2, 17.0], [15.3, 17.0], [15.4, 17.0], [15.5, 17.0], [15.6, 17.0], [15.7, 17.0], [15.8, 17.0], [15.9, 17.0], [16.0, 17.0], [16.1, 17.0], [16.2, 17.0], [16.3, 17.0], [16.4, 18.0], [16.5, 18.0], [16.6, 18.0], [16.7, 18.0], [16.8, 18.0], [16.9, 18.0], [17.0, 18.0], [17.1, 18.0], [17.2, 18.0], [17.3, 18.0], [17.4, 18.0], [17.5, 19.0], [17.6, 19.0], [17.7, 19.0], [17.8, 19.0], [17.9, 19.0], [18.0, 19.0], [18.1, 19.0], [18.2, 19.0], [18.3, 19.0], [18.4, 19.0], [18.5, 19.0], [18.6, 20.0], [18.7, 20.0], [18.8, 20.0], [18.9, 20.0], [19.0, 20.0], [19.1, 20.0], [19.2, 20.0], [19.3, 20.0], [19.4, 20.0], [19.5, 20.0], [19.6, 20.0], [19.7, 21.0], [19.8, 21.0], [19.9, 21.0], [20.0, 21.0], [20.1, 21.0], [20.2, 21.0], [20.3, 21.0], [20.4, 21.0], [20.5, 21.0], [20.6, 21.0], [20.7, 21.0], [20.8, 21.0], [20.9, 22.0], [21.0, 22.0], [21.1, 22.0], [21.2, 22.0], [21.3, 22.0], [21.4, 22.0], [21.5, 22.0], [21.6, 22.0], [21.7, 22.0], [21.8, 22.0], [21.9, 23.0], [22.0, 23.0], [22.1, 23.0], [22.2, 23.0], [22.3, 23.0], [22.4, 23.0], [22.5, 23.0], [22.6, 23.0], [22.7, 23.0], [22.8, 23.0], [22.9, 24.0], [23.0, 24.0], [23.1, 24.0], [23.2, 24.0], [23.3, 24.0], [23.4, 24.0], [23.5, 24.0], [23.6, 24.0], [23.7, 24.0], [23.8, 24.0], [23.9, 24.0], [24.0, 25.0], [24.1, 25.0], [24.2, 25.0], [24.3, 25.0], [24.4, 25.0], [24.5, 25.0], [24.6, 25.0], [24.7, 25.0], [24.8, 25.0], [24.9, 25.0], [25.0, 26.0], [25.1, 26.0], [25.2, 26.0], [25.3, 26.0], [25.4, 26.0], [25.5, 26.0], [25.6, 26.0], [25.7, 26.0], [25.8, 26.0], [25.9, 26.0], [26.0, 27.0], [26.1, 27.0], [26.2, 27.0], [26.3, 27.0], [26.4, 27.0], [26.5, 27.0], [26.6, 27.0], [26.7, 27.0], [26.8, 27.0], [26.9, 28.0], [27.0, 28.0], [27.1, 28.0], [27.2, 28.0], [27.3, 28.0], [27.4, 28.0], [27.5, 28.0], [27.6, 28.0], [27.7, 28.0], [27.8, 28.0], [27.9, 29.0], [28.0, 29.0], [28.1, 29.0], [28.2, 29.0], [28.3, 29.0], [28.4, 29.0], [28.5, 29.0], [28.6, 29.0], [28.7, 29.0], [28.8, 30.0], [28.9, 30.0], [29.0, 30.0], [29.1, 30.0], [29.2, 30.0], [29.3, 30.0], [29.4, 30.0], [29.5, 30.0], [29.6, 30.0], [29.7, 31.0], [29.8, 31.0], [29.9, 31.0], [30.0, 31.0], [30.1, 31.0], [30.2, 31.0], [30.3, 31.0], [30.4, 31.0], [30.5, 32.0], [30.6, 32.0], [30.7, 32.0], [30.8, 32.0], [30.9, 32.0], [31.0, 32.0], [31.1, 32.0], [31.2, 32.0], [31.3, 32.0], [31.4, 33.0], [31.5, 33.0], [31.6, 33.0], [31.7, 33.0], [31.8, 33.0], [31.9, 33.0], [32.0, 33.0], [32.1, 34.0], [32.2, 34.0], [32.3, 34.0], [32.4, 34.0], [32.5, 34.0], [32.6, 34.0], [32.7, 34.0], [32.8, 34.0], [32.9, 35.0], [33.0, 35.0], [33.1, 35.0], [33.2, 35.0], [33.3, 35.0], [33.4, 35.0], [33.5, 35.0], [33.6, 36.0], [33.7, 36.0], [33.8, 36.0], [33.9, 36.0], [34.0, 36.0], [34.1, 36.0], [34.2, 36.0], [34.3, 37.0], [34.4, 37.0], [34.5, 37.0], [34.6, 37.0], [34.7, 37.0], [34.8, 37.0], [34.9, 37.0], [35.0, 38.0], [35.1, 38.0], [35.2, 38.0], [35.3, 38.0], [35.4, 38.0], [35.5, 38.0], [35.6, 38.0], [35.7, 39.0], [35.8, 39.0], [35.9, 39.0], [36.0, 39.0], [36.1, 39.0], [36.2, 39.0], [36.3, 39.0], [36.4, 40.0], [36.5, 40.0], [36.6, 40.0], [36.7, 40.0], [36.8, 40.0], [36.9, 40.0], [37.0, 41.0], [37.1, 41.0], [37.2, 41.0], [37.3, 41.0], [37.4, 41.0], [37.5, 41.0], [37.6, 42.0], [37.7, 42.0], [37.8, 42.0], [37.9, 42.0], [38.0, 42.0], [38.1, 42.0], [38.2, 43.0], [38.3, 43.0], [38.4, 43.0], [38.5, 43.0], [38.6, 43.0], [38.7, 43.0], [38.8, 44.0], [38.9, 44.0], [39.0, 44.0], [39.1, 44.0], [39.2, 44.0], [39.3, 45.0], [39.4, 45.0], [39.5, 45.0], [39.6, 45.0], [39.7, 45.0], [39.8, 46.0], [39.9, 46.0], [40.0, 46.0], [40.1, 46.0], [40.2, 46.0], [40.3, 47.0], [40.4, 47.0], [40.5, 47.0], [40.6, 47.0], [40.7, 47.0], [40.8, 48.0], [40.9, 48.0], [41.0, 48.0], [41.1, 48.0], [41.2, 48.0], [41.3, 49.0], [41.4, 49.0], [41.5, 49.0], [41.6, 49.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 51.0], [42.2, 51.0], [42.3, 51.0], [42.4, 51.0], [42.5, 52.0], [42.6, 52.0], [42.7, 52.0], [42.8, 52.0], [42.9, 53.0], [43.0, 53.0], [43.1, 53.0], [43.2, 53.0], [43.3, 54.0], [43.4, 54.0], [43.5, 54.0], [43.6, 55.0], [43.7, 55.0], [43.8, 55.0], [43.9, 55.0], [44.0, 56.0], [44.1, 56.0], [44.2, 56.0], [44.3, 57.0], [44.4, 57.0], [44.5, 57.0], [44.6, 58.0], [44.7, 58.0], [44.8, 58.0], [44.9, 59.0], [45.0, 59.0], [45.1, 59.0], [45.2, 60.0], [45.3, 60.0], [45.4, 60.0], [45.5, 61.0], [45.6, 61.0], [45.7, 61.0], [45.8, 62.0], [45.9, 62.0], [46.0, 63.0], [46.1, 63.0], [46.2, 63.0], [46.3, 64.0], [46.4, 64.0], [46.5, 65.0], [46.6, 65.0], [46.7, 66.0], [46.8, 66.0], [46.9, 67.0], [47.0, 67.0], [47.1, 68.0], [47.2, 68.0], [47.3, 69.0], [47.4, 69.0], [47.5, 70.0], [47.6, 71.0], [47.7, 71.0], [47.8, 72.0], [47.9, 72.0], [48.0, 73.0], [48.1, 74.0], [48.2, 74.0], [48.3, 75.0], [48.4, 76.0], [48.5, 77.0], [48.6, 77.0], [48.7, 78.0], [48.8, 79.0], [48.9, 80.0], [49.0, 81.0], [49.1, 82.0], [49.2, 83.0], [49.3, 84.0], [49.4, 85.0], [49.5, 86.0], [49.6, 87.0], [49.7, 88.0], [49.8, 90.0], [49.9, 91.0], [50.0, 93.0], [50.1, 94.0], [50.2, 96.0], [50.3, 97.0], [50.4, 99.0], [50.5, 101.0], [50.6, 103.0], [50.7, 105.0], [50.8, 108.0], [50.9, 110.0], [51.0, 112.0], [51.1, 115.0], [51.2, 118.0], [51.3, 120.0], [51.4, 122.0], [51.5, 125.0], [51.6, 127.0], [51.7, 129.0], [51.8, 131.0], [51.9, 134.0], [52.0, 136.0], [52.1, 138.0], [52.2, 140.0], [52.3, 143.0], [52.4, 145.0], [52.5, 147.0], [52.6, 149.0], [52.7, 151.0], [52.8, 153.0], [52.9, 156.0], [53.0, 158.0], [53.1, 160.0], [53.2, 162.0], [53.3, 164.0], [53.4, 166.0], [53.5, 168.0], [53.6, 170.0], [53.7, 172.0], [53.8, 174.0], [53.9, 176.0], [54.0, 178.0], [54.1, 180.0], [54.2, 182.0], [54.3, 184.0], [54.4, 186.0], [54.5, 188.0], [54.6, 190.0], [54.7, 192.0], [54.8, 194.0], [54.9, 196.0], [55.0, 198.0], [55.1, 200.0], [55.2, 202.0], [55.3, 204.0], [55.4, 207.0], [55.5, 209.0], [55.6, 211.0], [55.7, 213.0], [55.8, 216.0], [55.9, 218.0], [56.0, 220.0], [56.1, 222.0], [56.2, 225.0], [56.3, 227.0], [56.4, 230.0], [56.5, 232.0], [56.6, 234.0], [56.7, 237.0], [56.8, 239.0], [56.9, 242.0], [57.0, 244.0], [57.1, 246.0], [57.2, 249.0], [57.3, 251.0], [57.4, 254.0], [57.5, 256.0], [57.6, 259.0], [57.7, 261.0], [57.8, 263.0], [57.9, 266.0], [58.0, 268.0], [58.1, 270.0], [58.2, 273.0], [58.3, 275.0], [58.4, 278.0], [58.5, 280.0], [58.6, 283.0], [58.7, 286.0], [58.8, 288.0], [58.9, 291.0], [59.0, 293.0], [59.1, 296.0], [59.2, 299.0], [59.3, 302.0], [59.4, 304.0], [59.5, 307.0], [59.6, 309.0], [59.7, 312.0], [59.8, 315.0], [59.9, 318.0], [60.0, 320.0], [60.1, 323.0], [60.2, 326.0], [60.3, 329.0], [60.4, 332.0], [60.5, 335.0], [60.6, 338.0], [60.7, 340.0], [60.8, 343.0], [60.9, 346.0], [61.0, 349.0], [61.1, 352.0], [61.2, 355.0], [61.3, 358.0], [61.4, 361.0], [61.5, 364.0], [61.6, 367.0], [61.7, 370.0], [61.8, 373.0], [61.9, 377.0], [62.0, 380.0], [62.1, 383.0], [62.2, 386.0], [62.3, 389.0], [62.4, 393.0], [62.5, 396.0], [62.6, 399.0], [62.7, 403.0], [62.8, 406.0], [62.9, 410.0], [63.0, 413.0], [63.1, 416.0], [63.2, 420.0], [63.3, 423.0], [63.4, 427.0], [63.5, 431.0], [63.6, 435.0], [63.7, 438.0], [63.8, 442.0], [63.9, 446.0], [64.0, 450.0], [64.1, 454.0], [64.2, 458.0], [64.3, 462.0], [64.4, 467.0], [64.5, 471.0], [64.6, 476.0], [64.7, 481.0], [64.8, 486.0], [64.9, 491.0], [65.0, 496.0], [65.1, 501.0], [65.2, 507.0], [65.3, 512.0], [65.4, 518.0], [65.5, 523.0], [65.6, 529.0], [65.7, 534.0], [65.8, 540.0], [65.9, 546.0], [66.0, 552.0], [66.1, 557.0], [66.2, 563.0], [66.3, 569.0], [66.4, 574.0], [66.5, 581.0], [66.6, 587.0], [66.7, 593.0], [66.8, 599.0], [66.9, 604.0], [67.0, 611.0], [67.1, 617.0], [67.2, 623.0], [67.3, 629.0], [67.4, 637.0], [67.5, 644.0], [67.6, 652.0], [67.7, 659.0], [67.8, 666.0], [67.9, 674.0], [68.0, 682.0], [68.1, 690.0], [68.2, 698.0], [68.3, 706.0], [68.4, 714.0], [68.5, 723.0], [68.6, 732.0], [68.7, 740.0], [68.8, 749.0], [68.9, 758.0], [69.0, 767.0], [69.1, 777.0], [69.2, 786.0], [69.3, 797.0], [69.4, 806.0], [69.5, 817.0], [69.6, 827.0], [69.7, 836.0], [69.8, 845.0], [69.9, 855.0], [70.0, 863.0], [70.1, 872.0], [70.2, 880.0], [70.3, 889.0], [70.4, 898.0], [70.5, 906.0], [70.6, 914.0], [70.7, 922.0], [70.8, 928.0], [70.9, 934.0], [71.0, 941.0], [71.1, 948.0], [71.2, 953.0], [71.3, 959.0], [71.4, 966.0], [71.5, 971.0], [71.6, 978.0], [71.7, 984.0], [71.8, 990.0], [71.9, 997.0], [72.0, 1003.0], [72.1, 1008.0], [72.2, 1013.0], [72.3, 1018.0], [72.4, 1024.0], [72.5, 1030.0], [72.6, 1036.0], [72.7, 1041.0], [72.8, 1047.0], [72.9, 1052.0], [73.0, 1058.0], [73.1, 1063.0], [73.2, 1068.0], [73.3, 1074.0], [73.4, 1079.0], [73.5, 1085.0], [73.6, 1090.0], [73.7, 1096.0], [73.8, 1102.0], [73.9, 1107.0], [74.0, 1113.0], [74.1, 1118.0], [74.2, 1124.0], [74.3, 1130.0], [74.4, 1136.0], [74.5, 1142.0], [74.6, 1149.0], [74.7, 1156.0], [74.8, 1162.0], [74.9, 1169.0], [75.0, 1176.0], [75.1, 1183.0], [75.2, 1189.0], [75.3, 1197.0], [75.4, 1204.0], [75.5, 1211.0], [75.6, 1219.0], [75.7, 1226.0], [75.8, 1233.0], [75.9, 1242.0], [76.0, 1252.0], [76.1, 1261.0], [76.2, 1271.0], [76.3, 1280.0], [76.4, 1291.0], [76.5, 1302.0], [76.6, 1313.0], [76.7, 1326.0], [76.8, 1339.0], [76.9, 1352.0], [77.0, 1366.0], [77.1, 1381.0], [77.2, 1396.0], [77.3, 1410.0], [77.4, 1424.0], [77.5, 1439.0], [77.6, 1455.0], [77.7, 1471.0], [77.8, 1486.0], [77.9, 1499.0], [78.0, 1513.0], [78.1, 1526.0], [78.2, 1541.0], [78.3, 1555.0], [78.4, 1569.0], [78.5, 1582.0], [78.6, 1596.0], [78.7, 1609.0], [78.8, 1623.0], [78.9, 1638.0], [79.0, 1651.0], [79.1, 1665.0], [79.2, 1680.0], [79.3, 1693.0], [79.4, 1708.0], [79.5, 1720.0], [79.6, 1735.0], [79.7, 1748.0], [79.8, 1763.0], [79.9, 1777.0], [80.0, 1792.0], [80.1, 1805.0], [80.2, 1819.0], [80.3, 1832.0], [80.4, 1848.0], [80.5, 1861.0], [80.6, 1874.0], [80.7, 1887.0], [80.8, 1902.0], [80.9, 1914.0], [81.0, 1929.0], [81.1, 1942.0], [81.2, 1955.0], [81.3, 1967.0], [81.4, 1980.0], [81.5, 1991.0], [81.6, 2000.0], [81.7, 2000.0], [81.8, 2001.0], [81.9, 2001.0], [82.0, 2001.0], [82.1, 2001.0], [82.2, 2001.0], [82.3, 2001.0], [82.4, 2001.0], [82.5, 2002.0], [82.6, 2002.0], [82.7, 2002.0], [82.8, 2002.0], [82.9, 2002.0], [83.0, 2002.0], [83.1, 2002.0], [83.2, 2002.0], [83.3, 2003.0], [83.4, 2003.0], [83.5, 2003.0], [83.6, 2004.0], [83.7, 2004.0], [83.8, 2005.0], [83.9, 2006.0], [84.0, 2007.0], [84.1, 2008.0], [84.2, 2009.0], [84.3, 2010.0], [84.4, 2012.0], [84.5, 2015.0], [84.6, 2017.0], [84.7, 2020.0], [84.8, 2023.0], [84.9, 2027.0], [85.0, 2032.0], [85.1, 2037.0], [85.2, 2042.0], [85.3, 2048.0], [85.4, 2054.0], [85.5, 2059.0], [85.6, 2065.0], [85.7, 2071.0], [85.8, 2078.0], [85.9, 2086.0], [86.0, 2093.0], [86.1, 2100.0], [86.2, 2107.0], [86.3, 2113.0], [86.4, 2120.0], [86.5, 2128.0], [86.6, 2135.0], [86.7, 2142.0], [86.8, 2149.0], [86.9, 2157.0], [87.0, 2164.0], [87.1, 2172.0], [87.2, 2180.0], [87.3, 2187.0], [87.4, 2194.0], [87.5, 2200.0], [87.6, 2207.0], [87.7, 2213.0], [87.8, 2220.0], [87.9, 2226.0], [88.0, 2232.0], [88.1, 2239.0], [88.2, 2246.0], [88.3, 2254.0], [88.4, 2260.0], [88.5, 2267.0], [88.6, 2274.0], [88.7, 2281.0], [88.8, 2288.0], [88.9, 2294.0], [89.0, 2300.0], [89.1, 2305.0], [89.2, 2310.0], [89.3, 2316.0], [89.4, 2323.0], [89.5, 2329.0], [89.6, 2336.0], [89.7, 2342.0], [89.8, 2349.0], [89.9, 2356.0], [90.0, 2363.0], [90.1, 2370.0], [90.2, 2377.0], [90.3, 2383.0], [90.4, 2390.0], [90.5, 2396.0], [90.6, 2401.0], [90.7, 2406.0], [90.8, 2412.0], [90.9, 2418.0], [91.0, 2424.0], [91.1, 2432.0], [91.2, 2441.0], [91.3, 2450.0], [91.4, 2459.0], [91.5, 2469.0], [91.6, 2480.0], [91.7, 2490.0], [91.8, 2498.0], [91.9, 2507.0], [92.0, 2517.0], [92.1, 2528.0], [92.2, 2541.0], [92.3, 2557.0], [92.4, 2574.0], [92.5, 2590.0], [92.6, 2607.0], [92.7, 2626.0], [92.8, 2644.0], [92.9, 2664.0], [93.0, 2687.0], [93.1, 2708.0], [93.2, 2730.0], [93.3, 2752.0], [93.4, 2775.0], [93.5, 2796.0], [93.6, 2817.0], [93.7, 2836.0], [93.8, 2857.0], [93.9, 2876.0], [94.0, 2895.0], [94.1, 2913.0], [94.2, 2931.0], [94.3, 2949.0], [94.4, 2967.0], [94.5, 2985.0], [94.6, 3003.0], [94.7, 3017.0], [94.8, 3031.0], [94.9, 3045.0], [95.0, 3060.0], [95.1, 3075.0], [95.2, 3093.0], [95.3, 3110.0], [95.4, 3128.0], [95.5, 3147.0], [95.6, 3165.0], [95.7, 3185.0], [95.8, 3203.0], [95.9, 3225.0], [96.0, 3248.0], [96.1, 3273.0], [96.2, 3301.0], [96.3, 3332.0], [96.4, 3363.0], [96.5, 3397.0], [96.6, 3434.0], [96.7, 3473.0], [96.8, 3517.0], [96.9, 3562.0], [97.0, 3608.0], [97.1, 3656.0], [97.2, 3709.0], [97.3, 3755.0], [97.4, 3802.0], [97.5, 3846.0], [97.6, 3889.0], [97.7, 3934.0], [97.8, 3977.0], [97.9, 4016.0], [98.0, 4049.0], [98.1, 4086.0], [98.2, 4132.0], [98.3, 4198.0], [98.4, 4278.0], [98.5, 4375.0], [98.6, 4483.0], [98.7, 4605.0], [98.8, 4725.0], [98.9, 4853.0], [99.0, 4987.0], [99.1, 5089.0], [99.2, 5240.0], [99.3, 5478.0], [99.4, 5819.0], [99.5, 6153.0], [99.6, 6693.0], [99.7, 7535.0], [99.8, 8707.0], [99.9, 10988.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 387868.0, "series": [{"data": [[0.0, 387868.0], [100.0, 35718.0], [200.0, 32033.0], [300.0, 25983.0], [400.0, 18970.0], [500.0, 13457.0], [600.0, 10828.0], [700.0, 8506.0], [800.0, 8403.0], [900.0, 11717.0], [1000.0, 13977.0], [1100.0, 12078.0], [1200.0, 8816.0], [1300.0, 5742.0], [1400.0, 5213.0], [1500.0, 5590.0], [1600.0, 5502.0], [1700.0, 5491.0], [1800.0, 5601.0], [1900.0, 6002.0], [2000.0, 34835.0], [2100.0, 10760.0], [2300.0, 12115.0], [2200.0, 11567.0], [2400.0, 9577.0], [2500.0, 5691.0], [2600.0, 3886.0], [2800.0, 3924.0], [2700.0, 3501.0], [2900.0, 4278.0], [3000.0, 5051.0], [3100.0, 4178.0], [3300.0, 2402.0], [3200.0, 3187.0], [3400.0, 1968.0], [3500.0, 1662.0], [3600.0, 1567.0], [3700.0, 1623.0], [3800.0, 1752.0], [3900.0, 1810.0], [4000.0, 2105.0], [4300.0, 744.0], [4200.0, 946.0], [4100.0, 1310.0], [4400.0, 711.0], [4600.0, 648.0], [4500.0, 625.0], [4700.0, 607.0], [4800.0, 564.0], [5000.0, 766.0], [4900.0, 607.0], [5100.0, 519.0], [5200.0, 389.0], [5300.0, 328.0], [5500.0, 238.0], [5400.0, 298.0], [5600.0, 236.0], [5800.0, 210.0], [5700.0, 187.0], [6000.0, 235.0], [6100.0, 202.0], [5900.0, 247.0], [6200.0, 168.0], [6300.0, 144.0], [6400.0, 148.0], [6600.0, 105.0], [6500.0, 117.0], [6800.0, 92.0], [6700.0, 129.0], [6900.0, 100.0], [7100.0, 93.0], [7000.0, 126.0], [7400.0, 62.0], [7200.0, 70.0], [7300.0, 63.0], [7500.0, 101.0], [7600.0, 90.0], [7700.0, 64.0], [7900.0, 60.0], [7800.0, 66.0], [8000.0, 81.0], [8100.0, 89.0], [8400.0, 40.0], [8700.0, 44.0], [8300.0, 42.0], [8600.0, 43.0], [8500.0, 46.0], [8200.0, 77.0], [9200.0, 46.0], [8900.0, 46.0], [8800.0, 50.0], [9000.0, 37.0], [9100.0, 37.0], [9600.0, 34.0], [9700.0, 25.0], [9400.0, 21.0], [9500.0, 29.0], [9300.0, 27.0], [10200.0, 62.0], [10100.0, 22.0], [9800.0, 22.0], [9900.0, 29.0], [10000.0, 20.0], [10600.0, 55.0], [10700.0, 45.0], [10400.0, 30.0], [10300.0, 26.0], [10500.0, 17.0], [11100.0, 14.0], [11200.0, 37.0], [10800.0, 25.0], [10900.0, 26.0], [11000.0, 28.0], [11700.0, 19.0], [11600.0, 14.0], [11300.0, 19.0], [11400.0, 21.0], [11500.0, 15.0], [11800.0, 27.0], [11900.0, 16.0], [12000.0, 7.0], [12200.0, 17.0], [12100.0, 12.0], [12400.0, 24.0], [12700.0, 10.0], [12500.0, 21.0], [12600.0, 10.0], [12300.0, 12.0], [13000.0, 32.0], [13100.0, 61.0], [12800.0, 9.0], [13300.0, 11.0], [13200.0, 20.0], [12900.0, 10.0], [13400.0, 20.0], [13700.0, 11.0], [13600.0, 9.0], [13500.0, 25.0], [13800.0, 4.0], [14000.0, 7.0], [14100.0, 14.0], [14200.0, 2.0], [13900.0, 5.0], [14300.0, 4.0], [14800.0, 4.0], [14600.0, 2.0], [14700.0, 3.0], [14500.0, 4.0], [14400.0, 1.0], [15300.0, 1.0], [15200.0, 7.0], [14900.0, 4.0], [15700.0, 11.0], [15600.0, 21.0], [15800.0, 10.0], [15500.0, 5.0], [15400.0, 4.0], [16000.0, 4.0], [16100.0, 8.0], [16200.0, 2.0], [16300.0, 4.0], [15900.0, 9.0], [16800.0, 1.0], [17200.0, 2.0], [17800.0, 3.0], [18800.0, 9.0], [19000.0, 1.0], [18600.0, 1.0], [19800.0, 3.0], [20000.0, 6.0], [20600.0, 8.0], [20800.0, 2.0], [21000.0, 1.0], [21400.0, 1.0], [21200.0, 2.0], [23000.0, 1.0], [23800.0, 3.0], [24200.0, 1.0], [23600.0, 1.0], [25200.0, 1.0], [25000.0, 1.0], [24800.0, 3.0], [25400.0, 1.0], [24600.0, 1.0], [25800.0, 2.0], [25600.0, 1.0], [17300.0, 3.0], [17100.0, 1.0], [18500.0, 1.0], [18900.0, 6.0], [19100.0, 1.0], [19500.0, 1.0], [19900.0, 4.0], [20100.0, 2.0], [20700.0, 3.0], [21500.0, 2.0], [20900.0, 1.0], [20500.0, 2.0], [21300.0, 2.0], [21100.0, 3.0], [23100.0, 1.0], [23900.0, 1.0], [23700.0, 1.0], [24900.0, 2.0], [24700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 25800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 89761.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 474279.0, "series": [{"data": [[0.0, 89784.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 89761.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 115483.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 474279.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 493.9139393380665, "minX": 1.54567608E12, "maxY": 500.0, "series": [{"data": [[1.54567662E12, 500.0], [1.54567692E12, 500.0], [1.5456765E12, 500.0], [1.54567722E12, 500.0], [1.5456762E12, 500.0], [1.54567656E12, 500.0], [1.54567686E12, 500.0], [1.54567716E12, 500.0], [1.54567626E12, 500.0], [1.5456768E12, 500.0], [1.5456771E12, 500.0], [1.54567632E12, 500.0], [1.54567674E12, 500.0], [1.54567704E12, 500.0], [1.54567638E12, 500.0], [1.54567608E12, 495.335803432138], [1.54567668E12, 500.0], [1.54567698E12, 500.0], [1.54567644E12, 500.0], [1.54567728E12, 493.9139393380665], [1.54567614E12, 500.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54567728E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "maxY": 3714.0, "series": [{"data": [[2.0, 1795.5], [3.0, 1297.0], [4.0, 316.0], [5.0, 2313.0], [7.0, 1275.5], [8.0, 1260.0], [9.0, 1261.0], [10.0, 1294.0], [11.0, 313.0], [12.0, 257.0], [13.0, 84.0], [14.0, 1240.0], [15.0, 1196.0], [16.0, 1295.0], [17.0, 289.0], [18.0, 1301.0], [19.0, 300.0], [20.0, 283.0], [21.0, 281.0], [22.0, 2304.0], [23.0, 2303.0], [24.0, 1226.0], [25.0, 287.0], [26.0, 1241.0], [27.0, 2226.0], [28.0, 2247.0], [29.0, 2223.0], [30.0, 1311.0], [31.0, 177.0], [33.0, 299.0], [32.0, 305.0], [34.0, 77.0], [37.0, 1577.0], [36.0, 2243.0], [39.0, 346.0], [38.0, 2299.0], [41.0, 2216.0], [40.0, 2303.0], [43.0, 1205.0], [42.0, 75.0], [45.0, 289.0], [44.0, 265.0], [47.0, 1204.0], [46.0, 1250.0], [49.0, 287.0], [48.0, 198.0], [51.0, 302.0], [50.0, 1216.0], [53.0, 1282.0], [52.0, 202.0], [55.0, 2210.0], [54.0, 1221.0], [57.0, 1280.0], [56.0, 2214.0], [59.0, 346.0], [58.0, 1199.0], [61.0, 299.0], [60.0, 265.0], [63.0, 2284.0], [62.0, 271.0], [67.0, 2287.0], [66.0, 1194.0], [65.0, 292.0], [64.0, 1272.0], [71.0, 1288.0], [70.0, 1237.0], [69.0, 1549.0], [68.0, 289.0], [75.0, 3290.0], [74.0, 273.0], [73.0, 1297.0], [72.0, 1288.0], [79.0, 2288.0], [78.0, 1268.0], [77.0, 245.0], [76.0, 2273.0], [83.0, 279.0], [82.0, 322.0], [81.0, 1264.0], [80.0, 172.0], [87.0, 248.0], [86.0, 1169.0], [85.0, 1194.0], [84.0, 250.0], [91.0, 3281.0], [90.0, 177.0], [89.0, 177.0], [88.0, 1280.0], [95.0, 2268.0], [94.0, 1242.0], [93.0, 1201.0], [92.0, 1254.0], [99.0, 1268.0], [98.0, 2271.0], [97.0, 271.0], [96.0, 2268.0], [103.0, 169.0], [102.0, 266.0], [101.0, 1282.0], [100.0, 1283.0], [107.0, 169.0], [106.0, 169.0], [105.0, 1771.0], [111.0, 264.0], [110.0, 222.0], [109.0, 1227.0], [114.0, 3155.0], [113.0, 1217.0], [112.0, 266.0], [119.0, 1249.0], [118.0, 266.0], [117.0, 1245.0], [116.0, 1712.0], [123.0, 305.0], [122.0, 226.0], [121.0, 1275.0], [120.0, 1226.0], [127.0, 264.0], [126.0, 1265.0], [125.0, 3271.0], [124.0, 152.0], [135.0, 1187.0], [134.0, 2252.0], [133.0, 1161.0], [132.0, 3265.0], [131.0, 1133.0], [130.0, 207.0], [129.0, 1265.0], [128.0, 1441.0], [143.0, 1851.0], [142.0, 1185.0], [141.0, 1169.0], [140.0, 1233.0], [139.0, 2243.0], [138.0, 207.0], [137.0, 198.0], [136.0, 1260.0], [151.0, 254.0], [150.0, 1232.0], [149.0, 253.0], [148.0, 2158.0], [147.0, 243.0], [146.0, 1225.0], [145.0, 249.0], [144.0, 1535.0], [159.0, 1230.0], [158.0, 2244.0], [157.0, 17.0], [156.0, 1157.0], [155.0, 148.0], [154.0, 18.0], [153.0, 1193.0], [167.0, 2243.0], [166.0, 1140.0], [165.0, 287.0], [164.0, 1175.0], [163.0, 1251.0], [162.0, 1250.0], [161.0, 2237.0], [160.0, 2239.0], [175.0, 236.0], [174.0, 143.0], [173.0, 246.0], [172.0, 1201.0], [171.0, 242.0], [170.0, 1166.0], [169.0, 244.0], [168.0, 2166.0], [183.0, 1175.0], [182.0, 1147.0], [181.0, 227.5], [179.0, 1137.0], [178.0, 1254.0], [177.0, 2234.0], [176.0, 1454.0], [191.0, 260.5], [189.0, 1690.5], [187.0, 241.0], [186.0, 137.0], [185.0, 207.0], [184.0, 205.0], [194.0, 367.75], [199.0, 220.0], [198.0, 162.5], [196.0, 2146.0], [195.0, 1131.0], [193.0, 5.0], [192.0, 5.0], [205.0, 675.0], [207.0, 4.0], [206.0, 1.0], [204.0, 1215.0], [203.0, 3124.0], [202.0, 1221.0], [201.0, 1186.0], [200.0, 125.0], [215.0, 180.0], [214.0, 254.0], [213.0, 215.0], [212.0, 192.5], [211.0, 2400.6666666666665], [210.0, 2234.0], [209.0, 685.0], [222.0, 106.33333333333333], [216.0, 594.0], [223.0, 1188.0], [221.0, 2201.0], [220.0, 1173.0], [219.0, 151.0], [218.0, 1143.0], [217.0, 2144.0], [230.0, 207.0], [229.0, 1117.0], [228.0, 2207.0], [227.0, 1187.0], [226.0, 1188.0], [225.0, 199.0], [224.0, 76.0], [232.0, 839.6666666666667], [239.0, 1098.0], [238.0, 3242.0], [237.0, 1098.0], [236.0, 1194.0], [235.0, 190.0], [234.0, 1602.0], [233.0, 203.0], [242.0, 771.0], [247.0, 198.0], [246.0, 2117.0], [245.0, 2194.0], [244.0, 1187.0], [243.0, 249.0], [241.0, 1091.0], [240.0, 1154.0], [253.0, 1167.0], [255.0, 1089.0], [254.0, 2190.0], [252.0, 2194.0], [251.0, 1103.0], [250.0, 1444.0], [249.0, 1325.0], [248.0, 162.0], [270.0, 1151.0], [267.0, 159.0], [265.0, 605.0], [258.0, 630.5], [256.0, 1670.0], [257.0, 3200.0], [263.0, 151.0], [262.0, 1319.0], [261.0, 1163.0], [260.0, 2186.5], [271.0, 2192.0], [264.0, 233.0], [269.0, 3195.0], [268.0, 187.0], [266.0, 1184.0], [285.0, 610.0], [287.0, 1407.0], [281.0, 643.0], [275.0, 981.0], [274.0, 2184.0], [273.0, 3194.0], [272.0, 231.0], [286.0, 2172.0], [283.0, 1174.0], [280.0, 1180.0], [279.0, 613.0], [277.0, 185.0], [276.0, 2076.0], [302.0, 1295.0], [299.0, 1663.0], [298.0, 153.33333333333334], [288.0, 570.3333333333333], [292.0, 95.0], [293.0, 72.0], [295.0, 2161.0], [294.0, 3279.0], [303.0, 1053.0], [301.0, 1267.0], [300.0, 155.0], [291.0, 176.0], [290.0, 1158.0], [289.0, 2076.0], [297.0, 1603.5], [318.0, 149.75], [319.0, 314.25000000000006], [316.0, 642.5], [315.0, 126.0], [317.0, 1023.0], [314.0, 143.0], [313.0, 163.0], [312.0, 656.0], [310.0, 172.0], [305.0, 170.0], [304.0, 2159.0], [307.0, 2160.0], [306.0, 1089.0], [309.0, 167.0], [308.0, 211.0], [334.0, 60.0], [335.0, 2151.0], [333.0, 2166.0], [332.0, 1521.0], [331.0, 131.0], [330.0, 1147.0], [329.0, 1176.0], [328.0, 1119.0], [327.0, 1408.0], [321.0, 2156.0], [320.0, 150.0], [323.0, 1893.0], [322.0, 132.0], [326.0, 1145.0], [325.0, 162.0], [324.0, 2159.0], [350.0, 1276.0], [343.0, 371.8983050847458], [336.0, 1747.0], [337.0, 2152.0], [339.0, 1035.0], [338.0, 160.0], [342.0, 235.5], [341.0, 3161.0], [340.0, 1065.0], [351.0, 2142.0], [345.0, 2145.0], [344.0, 115.0], [349.0, 2146.0], [348.0, 2141.0], [347.0, 1059.0], [346.0, 196.0], [367.0, 3143.0], [362.0, 597.5], [366.0, 10.0], [365.0, 1017.0], [364.0, 1155.0], [355.0, 2141.0], [354.0, 1046.0], [353.0, 2141.0], [352.0, 192.0], [363.0, 142.0], [361.0, 99.0], [360.0, 1141.0], [359.0, 146.0], [358.0, 2145.0], [357.0, 3714.0], [356.0, 3151.0], [382.0, 37.0], [383.0, 134.0], [381.0, 133.0], [380.0, 1232.0], [379.0, 138.0], [378.0, 2133.0], [377.0, 1117.0], [376.0, 1139.0], [375.0, 185.0], [368.0, 40.0], [370.0, 1141.0], [369.0, 993.0], [374.0, 2144.0], [373.0, 8.0], [372.0, 821.5], [398.0, 802.5], [399.0, 2193.125], [396.0, 1027.0], [387.0, 2135.0], [386.0, 1375.0], [385.0, 1063.0], [384.0, 183.0], [395.0, 98.0], [394.0, 1084.0], [393.0, 1132.0], [391.0, 1117.0], [390.0, 33.0], [389.0, 75.0], [388.0, 34.0], [414.0, 56.0], [415.0, 1050.0], [413.0, 2068.0], [412.0, 1051.5], [410.0, 55.0], [409.0, 2034.9565217391305], [408.0, 1316.5], [407.0, 2105.0], [401.0, 57.0], [400.0, 1376.0], [403.0, 14.0], [402.0, 1017.0], [406.0, 556.5], [404.0, 2108.0], [430.0, 289.0], [422.0, 454.8333333333333], [420.0, 986.0], [423.0, 2066.0], [418.0, 747.5], [416.0, 952.0], [428.0, 990.0], [431.0, 1267.0], [429.0, 2069.0], [427.0, 2071.0], [426.0, 2064.0], [425.0, 945.0], [424.0, 2958.0], [445.0, 1996.0], [435.0, 984.3333333333333], [446.0, 3053.0], [444.0, 1963.0], [443.0, 2001.0], [442.0, 2185.166666666667], [441.0, 103.0], [440.0, 513.5], [438.0, 104.0], [432.0, 31.0], [434.0, 1419.0], [433.0, 33.0], [437.0, 984.0], [436.0, 2054.0], [462.0, 2022.0], [463.0, 1999.5714285714284], [461.0, 2034.0], [460.0, 1006.5], [459.0, 1026.0], [458.0, 45.0], [457.0, 1043.0], [456.0, 1776.0], [455.0, 1002.0], [449.0, 1016.0], [448.0, 1857.0], [451.0, 50.0], [450.0, 48.0], [454.0, 709.3333333333333], [452.0, 1673.3333333333333], [478.0, 270.5], [473.0, 1490.0], [475.0, 1158.6666666666667], [476.0, 1978.8666666666668], [479.0, 2030.0], [477.0, 2010.0], [474.0, 4.0], [472.0, 1519.5], [471.0, 1977.0], [465.0, 1788.0], [464.0, 1509.0], [467.0, 1018.0], [466.0, 2039.0], [470.0, 3606.0], [469.0, 1037.0], [468.0, 62.5], [483.0, 2002.0], [487.0, 1141.3333333333333], [485.0, 271.0], [492.0, 483.0], [495.0, 923.0], [494.0, 977.5], [491.0, 999.0], [490.0, 53.0], [484.0, 2006.0], [482.0, 1747.75], [481.0, 2575.0], [480.0, 1007.0], [496.0, 1239.9090909090908], [500.0, 773.0575506140373], [499.0, 407.4285714285715], [498.0, 256.67768595041343], [497.0, 2145.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[499.78174122943045, 773.2185512415753]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10764.283333333333, "minX": 1.54567608E12, "maxY": 1589356.2, "series": [{"data": [[1.54567662E12, 1189021.05], [1.54567692E12, 1483362.9], [1.5456765E12, 1319203.7166666666], [1.54567722E12, 1353080.2333333334], [1.5456762E12, 1346171.3], [1.54567656E12, 1503098.2666666666], [1.54567686E12, 1506455.1333333333], [1.54567716E12, 1589356.2], [1.54567626E12, 1242916.1833333333], [1.5456768E12, 1545880.5666666667], [1.5456771E12, 1417269.8166666667], [1.54567632E12, 1475849.9666666666], [1.54567674E12, 1466572.05], [1.54567704E12, 1438633.95], [1.54567638E12, 1174445.4833333334], [1.54567608E12, 196791.85], [1.54567668E12, 1490028.7666666666], [1.54567698E12, 1386952.5333333334], [1.54567644E12, 1423816.5166666666], [1.54567728E12, 814749.5333333333], [1.54567614E12, 836674.2666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.54567662E12, 47007.316666666666], [1.54567692E12, 16910.683333333334], [1.5456765E12, 49371.4], [1.54567722E12, 33876.3], [1.5456762E12, 15268.733333333334], [1.54567656E12, 14923.5], [1.54567686E12, 39729.65], [1.54567716E12, 20603.483333333334], [1.54567626E12, 54235.4], [1.5456768E12, 16207.733333333334], [1.5456771E12, 35913.26666666667], [1.54567632E12, 14219.033333333333], [1.54567674E12, 43130.11666666667], [1.54567704E12, 18885.066666666666], [1.54567638E12, 51953.3], [1.54567608E12, 14948.9], [1.54567668E12, 16412.333333333332], [1.54567698E12, 37919.3], [1.54567644E12, 14206.116666666667], [1.54567728E12, 10764.283333333333], [1.54567614E12, 54256.96666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54567728E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 691.7165928386854, "minX": 1.54567608E12, "maxY": 1400.352704108163, "series": [{"data": [[1.54567662E12, 805.2065173336227], [1.54567692E12, 764.1889235809007], [1.5456765E12, 733.2183183850979], [1.54567722E12, 777.9915184112606], [1.5456762E12, 834.429191321503], [1.54567656E12, 771.389390461618], [1.54567686E12, 691.7165928386854], [1.54567716E12, 710.2881030766661], [1.54567626E12, 739.2629231040623], [1.5456768E12, 739.9976514795691], [1.5456771E12, 736.9857911095778], [1.54567632E12, 798.3970392417903], [1.54567674E12, 696.0588057057623], [1.54567704E12, 781.1237325687463], [1.54567638E12, 780.8885015567221], [1.54567608E12, 1400.352704108163], [1.54567668E12, 769.4429637934159], [1.54567698E12, 745.4765149066377], [1.54567644E12, 819.5919896501489], [1.54567728E12, 749.6884852954751], [1.54567614E12, 967.4689652877178]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54567728E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 504.193829247677, "minX": 1.54567608E12, "maxY": 1247.1088143525744, "series": [{"data": [[1.54567662E12, 675.3606960469066], [1.54567692E12, 554.6285253621327], [1.5456765E12, 607.8398191386898], [1.54567722E12, 611.657323127838], [1.5456762E12, 504.193829247677], [1.54567656E12, 531.150905381278], [1.54567686E12, 551.8372323735675], [1.54567716E12, 505.9978209895542], [1.54567626E12, 616.4664415152426], [1.5456768E12, 522.2743319077404], [1.5456771E12, 589.189920568354], [1.54567632E12, 514.6033001749327], [1.54567674E12, 566.7451519671828], [1.54567704E12, 576.5614492375814], [1.54567638E12, 645.1955879613555], [1.54567608E12, 1247.1088143525744], [1.54567668E12, 547.8057176344672], [1.54567698E12, 606.917845687146], [1.54567644E12, 543.8066681041437], [1.54567728E12, 510.6800958790453], [1.54567614E12, 828.8551269677522]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54567728E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 274.5548433712476, "minX": 1.54567608E12, "maxY": 404.23023920956774, "series": [{"data": [[1.54567662E12, 314.3180307492779], [1.54567692E12, 364.7039463581913], [1.5456765E12, 283.2111531144244], [1.54567722E12, 328.81824058750664], [1.5456762E12, 393.27681036911736], [1.54567656E12, 369.08594746238305], [1.54567686E12, 283.89181893687555], [1.54567716E12, 340.24113592761745], [1.54567626E12, 280.7663885878453], [1.5456768E12, 357.67659637585916], [1.5456771E12, 305.6933494498978], [1.54567632E12, 379.5137463773783], [1.54567674E12, 274.5548433712476], [1.54567704E12, 372.3069203701289], [1.54567638E12, 290.68014050400535], [1.54567608E12, 404.23023920956774], [1.54567668E12, 368.30848217698264], [1.54567698E12, 308.0569410945603], [1.54567644E12, 392.92612258099257], [1.54567728E12, 362.6020558679837], [1.54567614E12, 354.04459679834787]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54567728E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.54567608E12, "maxY": 25836.0, "series": [{"data": [[1.54567662E12, 4733.0], [1.54567692E12, 6278.0], [1.5456765E12, 4270.0], [1.54567722E12, 5089.0], [1.5456762E12, 25836.0], [1.54567656E12, 9420.0], [1.54567686E12, 4230.0], [1.54567716E12, 5567.0], [1.54567626E12, 4762.0], [1.5456768E12, 7228.0], [1.5456771E12, 4804.0], [1.54567632E12, 15420.0], [1.54567674E12, 4505.0], [1.54567704E12, 5935.0], [1.54567638E12, 5087.0], [1.54567608E12, 5285.0], [1.54567668E12, 7944.0], [1.54567698E12, 4824.0], [1.54567644E12, 11246.0], [1.54567728E12, 5883.0], [1.54567614E12, 4956.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.54567662E12, 59.0], [1.54567692E12, 91.0], [1.5456765E12, 72.0], [1.54567722E12, 47.0], [1.5456762E12, 4.0], [1.54567656E12, 64.0], [1.54567686E12, 73.0], [1.54567716E12, 68.0], [1.54567626E12, 61.0], [1.5456768E12, 71.0], [1.5456771E12, 69.0], [1.54567632E12, 97.0], [1.54567674E12, 71.0], [1.54567704E12, 78.0], [1.54567638E12, 65.0], [1.54567608E12, 4.0], [1.54567668E12, 58.0], [1.54567698E12, 64.0], [1.54567644E12, 51.0], [1.54567728E12, 45.0], [1.54567614E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.54567662E12, 2633.0], [1.54567692E12, 3850.9000000000015], [1.5456765E12, 2384.0], [1.54567722E12, 3133.0], [1.5456762E12, 2941.0], [1.54567656E12, 4291.0], [1.54567686E12, 2734.0], [1.54567716E12, 3372.0], [1.54567626E12, 2326.9000000000015], [1.5456768E12, 3982.9000000000015], [1.5456771E12, 2999.0], [1.54567632E12, 3499.0], [1.54567674E12, 2603.0], [1.54567704E12, 3712.9000000000015], [1.54567638E12, 2274.0], [1.54567608E12, 3572.8999999999987], [1.54567668E12, 4139.0], [1.54567698E12, 2943.0], [1.54567644E12, 4265.0], [1.54567728E12, 3190.0], [1.54567614E12, 2286.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.54567662E12, 3798.9900000000016], [1.54567692E12, 5154.0], [1.5456765E12, 3368.9900000000016], [1.54567722E12, 4131.0], [1.5456762E12, 14105.0], [1.54567656E12, 7075.94000000001], [1.54567686E12, 3767.0], [1.54567716E12, 4212.0], [1.54567626E12, 3541.980000000003], [1.5456768E12, 5430.990000000002], [1.5456771E12, 3996.9900000000016], [1.54567632E12, 11381.81000000003], [1.54567674E12, 3680.9900000000016], [1.54567704E12, 4843.980000000003], [1.54567638E12, 3424.9900000000016], [1.54567608E12, 4977.7699999999995], [1.54567668E12, 6248.980000000003], [1.54567698E12, 3970.980000000003], [1.54567644E12, 8420.94000000001], [1.54567728E12, 4348.980000000003], [1.54567614E12, 3481.9900000000016]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.54567662E12, 3131.0], [1.54567692E12, 4306.850000000002], [1.5456765E12, 2906.0], [1.54567722E12, 3561.9000000000015], [1.5456762E12, 4444.850000000002], [1.54567656E12, 5413.0], [1.54567686E12, 3132.0], [1.54567716E12, 3879.0], [1.54567626E12, 2890.9500000000007], [1.5456768E12, 4553.950000000001], [1.5456771E12, 3365.0], [1.54567632E12, 7116.0], [1.54567674E12, 3063.0], [1.54567704E12, 4084.0], [1.54567638E12, 2778.7000000000044], [1.54567608E12, 4459.0], [1.54567668E12, 5040.9000000000015], [1.54567698E12, 3243.0], [1.54567644E12, 6058.0], [1.54567728E12, 3769.0], [1.54567614E12, 2813.9500000000007]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54567728E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19.0, "minX": 1000.0, "maxY": 14099.5, "series": [{"data": [[9000.0, 1103.0], [10000.0, 980.0], [11000.0, 1214.0], [12000.0, 1204.0], [13000.0, 1268.0], [14000.0, 909.5], [15000.0, 873.0], [1000.0, 1717.0], [16000.0, 1983.0], [17000.0, 649.5], [18000.0, 1516.5], [19000.0, 966.0], [20000.0, 10652.5], [22000.0, 4391.0], [23000.0, 1332.0], [25000.0, 8898.0], [2000.0, 1525.0], [33000.0, 8329.5], [42000.0, 14099.5], [3000.0, 1188.0], [51000.0, 398.0], [4000.0, 337.0], [5000.0, 280.0], [83000.0, 315.0], [6000.0, 401.0], [7000.0, 1028.0], [8000.0, 1525.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9000.0, 37.0], [10000.0, 35.0], [11000.0, 37.0], [12000.0, 39.0], [13000.0, 36.0], [14000.0, 37.0], [15000.0, 43.0], [1000.0, 37.0], [16000.0, 44.0], [17000.0, 47.0], [18000.0, 47.0], [19000.0, 58.0], [20000.0, 57.0], [21000.0, 145.0], [22000.0, 160.0], [23000.0, 63.0], [24000.0, 79.0], [25000.0, 74.0], [26000.0, 134.0], [27000.0, 36.0], [28000.0, 44.0], [29000.0, 235.0], [30000.0, 145.0], [31000.0, 61.0], [2000.0, 23.0], [32000.0, 139.0], [33000.0, 301.0], [34000.0, 196.5], [35000.0, 199.0], [38000.0, 44.0], [40000.0, 59.0], [39000.0, 83.0], [42000.0, 303.0], [3000.0, 21.0], [48000.0, 194.0], [49000.0, 591.0], [50000.0, 382.0], [4000.0, 19.0], [64000.0, 192.5], [5000.0, 24.0], [6000.0, 28.0], [7000.0, 31.0], [8000.0, 33.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 83000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 14099.5, "series": [{"data": [[9000.0, 1103.0], [10000.0, 980.0], [11000.0, 1214.0], [12000.0, 1204.0], [13000.0, 1268.0], [14000.0, 909.5], [15000.0, 873.0], [1000.0, 1717.0], [16000.0, 1983.0], [17000.0, 649.5], [18000.0, 1516.5], [19000.0, 966.0], [20000.0, 10652.5], [22000.0, 4391.0], [23000.0, 1332.0], [25000.0, 8898.0], [2000.0, 1525.0], [33000.0, 8329.5], [42000.0, 14099.5], [3000.0, 1187.5], [51000.0, 398.0], [4000.0, 337.0], [5000.0, 280.0], [83000.0, 315.0], [6000.0, 401.0], [7000.0, 1028.0], [8000.0, 1525.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9000.0, 0.0], [10000.0, 0.0], [11000.0, 0.0], [12000.0, 0.0], [13000.0, 0.0], [14000.0, 0.0], [15000.0, 0.0], [1000.0, 0.0], [16000.0, 0.0], [17000.0, 0.0], [18000.0, 0.0], [19000.0, 0.0], [20000.0, 0.0], [21000.0, 0.0], [22000.0, 0.0], [23000.0, 0.0], [24000.0, 0.0], [25000.0, 0.0], [26000.0, 0.0], [27000.0, 0.0], [28000.0, 0.0], [29000.0, 0.0], [30000.0, 0.0], [31000.0, 0.0], [2000.0, 0.0], [32000.0, 0.0], [33000.0, 0.0], [34000.0, 0.0], [35000.0, 0.0], [38000.0, 0.0], [40000.0, 0.0], [39000.0, 0.0], [42000.0, 0.0], [3000.0, 0.0], [48000.0, 0.0], [49000.0, 0.0], [50000.0, 0.0], [4000.0, 0.0], [64000.0, 0.0], [5000.0, 0.0], [6000.0, 0.0], [7000.0, 0.0], [8000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 83000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 136.53333333333333, "minX": 1.54567608E12, "maxY": 722.55, "series": [{"data": [[1.54567662E12, 616.7833333333333], [1.54567692E12, 651.2333333333333], [1.5456765E12, 674.55], [1.54567722E12, 644.5166666666667], [1.5456762E12, 591.5166666666667], [1.54567656E12, 653.5], [1.54567686E12, 722.55], [1.54567716E12, 703.7166666666667], [1.54567626E12, 661.2833333333333], [1.5456768E12, 674.0666666666667], [1.5456771E12, 675.6], [1.54567632E12, 638.35], [1.54567674E12, 715.0333333333333], [1.54567704E12, 639.4166666666666], [1.54567638E12, 626.2833333333333], [1.54567608E12, 136.53333333333333], [1.54567668E12, 654.15], [1.54567698E12, 670.2833333333333], [1.54567644E12, 618.4], [1.54567728E12, 353.25], [1.54567614E12, 500.76666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54567728E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.3, "minX": 1.54567608E12, "maxY": 490.9166666666667, "series": [{"data": [[1.54567662E12, 372.31666666666666], [1.54567692E12, 133.98333333333332], [1.5456765E12, 390.9], [1.54567722E12, 268.2], [1.5456762E12, 120.93333333333334], [1.54567656E12, 118.3], [1.54567686E12, 314.5], [1.54567716E12, 163.28333333333333], [1.54567626E12, 429.65], [1.5456768E12, 128.43333333333334], [1.5456771E12, 284.31666666666666], [1.54567632E12, 112.63333333333334], [1.54567674E12, 341.4166666666667], [1.54567704E12, 149.61666666666667], [1.54567638E12, 411.6], [1.54567608E12, 118.7], [1.54567668E12, 130.13333333333333], [1.54567698E12, 300.3], [1.54567644E12, 112.56666666666666], [1.54567728E12, 85.28333333333333], [1.54567614E12, 430.06666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.54567662E12, 34.36666666666667], [1.54567692E12, 48.7], [1.5456765E12, 37.333333333333336], [1.54567722E12, 45.4], [1.5456762E12, 31.15], [1.54567656E12, 55.4], [1.54567686E12, 43.95], [1.54567716E12, 61.28333333333333], [1.54567626E12, 36.75], [1.5456768E12, 54.833333333333336], [1.5456771E12, 41.75], [1.54567632E12, 61.75], [1.54567674E12, 40.016666666666666], [1.54567704E12, 46.416666666666664], [1.54567638E12, 39.3], [1.54567608E12, 9.5], [1.54567668E12, 51.21666666666667], [1.54567698E12, 39.18333333333333], [1.54567644E12, 60.983333333333334], [1.54567728E12, 32.65], [1.54567614E12, 32.11666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.54567662E12, 210.13333333333333], [1.54567692E12, 468.55], [1.5456765E12, 246.31666666666666], [1.54567722E12, 330.93333333333334], [1.5456762E12, 439.4166666666667], [1.54567656E12, 479.8], [1.54567686E12, 363.95], [1.54567716E12, 479.1166666666667], [1.54567626E12, 194.88333333333333], [1.5456768E12, 490.9166666666667], [1.5456771E12, 349.56666666666666], [1.54567632E12, 463.96666666666664], [1.54567674E12, 333.6333333333333], [1.54567704E12, 443.3833333333333], [1.54567638E12, 175.41666666666666], [1.54567668E12, 472.76666666666665], [1.54567698E12, 330.8], [1.54567644E12, 444.81666666666666], [1.54567728E12, 235.33333333333334], [1.54567614E12, 38.6]], "isOverall": false, "label": "Non HTTP response code: java.net.BindException", "isController": false}, {"data": [[1.54567728E12, 8.3]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54567728E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9.5, "minX": 1.54567608E12, "maxY": 545.75, "series": [{"data": [[1.54567662E12, 372.31666666666666], [1.54567692E12, 133.98333333333332], [1.5456765E12, 390.9], [1.54567722E12, 268.2], [1.5456762E12, 120.93333333333334], [1.54567656E12, 118.3], [1.54567686E12, 314.5], [1.54567716E12, 163.28333333333333], [1.54567626E12, 429.65], [1.5456768E12, 128.43333333333334], [1.5456771E12, 284.31666666666666], [1.54567632E12, 112.63333333333334], [1.54567674E12, 341.4166666666667], [1.54567704E12, 149.61666666666667], [1.54567638E12, 411.6], [1.54567608E12, 118.7], [1.54567668E12, 130.13333333333333], [1.54567698E12, 300.3], [1.54567644E12, 112.56666666666666], [1.54567728E12, 85.28333333333333], [1.54567614E12, 430.06666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.54567662E12, 244.5], [1.54567692E12, 517.25], [1.5456765E12, 283.65], [1.54567722E12, 376.3333333333333], [1.5456762E12, 470.56666666666666], [1.54567656E12, 535.2], [1.54567686E12, 407.9], [1.54567716E12, 540.4], [1.54567626E12, 231.63333333333333], [1.5456768E12, 545.75], [1.5456771E12, 391.31666666666666], [1.54567632E12, 525.7166666666667], [1.54567674E12, 373.65], [1.54567704E12, 489.8], [1.54567638E12, 214.71666666666667], [1.54567608E12, 9.5], [1.54567668E12, 523.9833333333333], [1.54567698E12, 369.98333333333335], [1.54567644E12, 505.8], [1.54567728E12, 276.28333333333336], [1.54567614E12, 70.71666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54567728E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.5, "minX": 1.54567608E12, "maxY": 545.75, "series": [{"data": [[1.54567662E12, 372.31666666666666], [1.54567692E12, 133.98333333333332], [1.5456765E12, 390.9], [1.54567722E12, 268.2], [1.5456762E12, 120.93333333333334], [1.54567656E12, 118.3], [1.54567686E12, 314.5], [1.54567716E12, 163.28333333333333], [1.54567626E12, 429.65], [1.5456768E12, 128.43333333333334], [1.5456771E12, 284.31666666666666], [1.54567632E12, 112.63333333333334], [1.54567674E12, 341.4166666666667], [1.54567704E12, 149.61666666666667], [1.54567638E12, 411.6], [1.54567608E12, 118.7], [1.54567668E12, 130.13333333333333], [1.54567698E12, 300.3], [1.54567644E12, 112.56666666666666], [1.54567728E12, 85.28333333333333], [1.54567614E12, 430.06666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.54567662E12, 244.5], [1.54567692E12, 517.25], [1.5456765E12, 283.65], [1.54567722E12, 376.3333333333333], [1.5456762E12, 470.56666666666666], [1.54567656E12, 535.2], [1.54567686E12, 407.9], [1.54567716E12, 540.4], [1.54567626E12, 231.63333333333333], [1.5456768E12, 545.75], [1.5456771E12, 391.31666666666666], [1.54567632E12, 525.7166666666667], [1.54567674E12, 373.65], [1.54567704E12, 489.8], [1.54567638E12, 214.71666666666667], [1.54567608E12, 9.5], [1.54567668E12, 523.9833333333333], [1.54567698E12, 369.98333333333335], [1.54567644E12, 505.8], [1.54567728E12, 276.28333333333336], [1.54567614E12, 70.71666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54567728E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 19800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

